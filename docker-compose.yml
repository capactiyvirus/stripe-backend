version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stripe-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: stripe_payments
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - stripe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stripe_user -d stripe_payments"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Application
  stripe-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stripe-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      PORT: 8080
      ENVIRONMENT: production
      LOG_LEVEL: info
      
      # Database Configuration
      DATABASE_URL: postgres://stripe_user:stripe_password123@postgres:5432/stripe_payments?sslmode=disable
      
      # Stripe Configuration (set these in .env or here)
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: http://localhost:3000,https://yourdomain.com
      
      # Email Configuration (optional)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      FROM_NAME: ${FROM_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stripe-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (optional - for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: stripe-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stripe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: stripe-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@stripe.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - stripe-network

# Networks
networks:
  stripe-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local